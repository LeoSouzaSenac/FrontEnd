# Manipulando o DOM com JavaScript üñ•Ô∏è‚ú®

## O que √© o DOM? ü§î

O **DOM (Document Object Model)** √© como se fosse o "esqueleto" da nossa p√°gina HTML. Ele organiza todos os elementos (como textos, imagens, bot√µes) em uma estrutura que o JavaScript consegue entender e modificar. Em outras palavras, com o DOM, o JavaScript consegue ‚Äúconversar‚Äù com os elementos da p√°gina.

Imagine que o DOM √© um mapa de todos os elementos de uma p√°gina. Com JavaScript, conseguimos ir at√© esses elementos, mudar textos, cores, tamanhos, adicionar ou remover partes da p√°gina... enfim, quase tudo!

---

## O Que √© `document`? üìÑ

No JavaScript, o `document` √© uma **representa√ß√£o da p√°gina HTML** atual. Ele √© o ponto de partida para manipular o DOM e acessar elementos HTML da p√°gina. Sempre que queremos fazer algo com um elemento, come√ßamos usando o `document`.

### Exemplo

```javascript
console.log(document); // Mostra toda a estrutura HTML da p√°gina no console
```

Com `document`, podemos **selecionar, criar, modificar e remover elementos** na p√°gina.

---

## O Que Podemos Fazer com o DOM? üé®üí°

Aqui est√£o as principais a√ß√µes que podemos realizar ao manipular o DOM:

1. **Selecionar Elementos** ‚Äì Encontrar e "pegar" um elemento espec√≠fico da p√°gina.
2. **Modificar Conte√∫do** ‚Äì Alterar o texto ou HTML de um elemento.
3. **Alterar Estilos** ‚Äì Mudar a cor, fonte, tamanho e outros estilos de um elemento.
4. **Adicionar ou Remover Elementos** ‚Äì Criar elementos novos ou remover os existentes.
5. **Atribuir Atributos** ‚Äì Adicionar ou modificar atributos como `src`, `href`, `class`, `id`, etc.
6. **Eventos** ‚Äì Fazer com que algo aconte√ßa ao interagir com a p√°gina, como ao clicar em um bot√£o ou passar o mouse.

---

## Selecionando Elementos com JavaScript üïµÔ∏è‚Äç‚ôÇÔ∏è

Para manipular qualquer elemento HTML, primeiro precisamos "encontr√°-lo". Existem algumas maneiras de fazer isso:

### 1. `getElementById()`

Se o elemento tiver um `id`, use `getElementById`.

```javascript
const titulo = document.getElementById('titulo');
```

### 2. `getElementsByClassName()`

Para selecionar elementos com uma `class`, usamos `getElementsByClassName`, que retorna uma lista de todos os elementos com essa classe.

```javascript
const descricoes = document.getElementsByClassName('descricao');
```

### 3. `querySelector()` e `querySelectorAll()`

Esses m√©todos funcionam com seletores CSS. Use `querySelector` para pegar o **primeiro** elemento que encontra e `querySelectorAll` para pegar **todos**.

```javascript
const titulo = document.querySelector('#titulo');
const descricoes = document.querySelectorAll('.descricao');
```

---

## Manipulando Conte√∫do e Estilo ‚úèÔ∏èüé®

Depois de selecionar um elemento, podemos alterar seu conte√∫do e estilo:

### Alterando Conte√∫do

```javascript
const titulo = document.getElementById('titulo');
titulo.textContent = 'Ol√°, JavaScript!';
```

### Alterando Estilos

```javascript
titulo.style.color = 'blue';
titulo.style.fontSize = '2em';
```

---

## Criando e Removendo Elementos üÜï‚ùå

### Criando um Novo Elemento

```javascript
const novoParagrafo = document.createElement('p');
novoParagrafo.textContent = 'Este √© um novo par√°grafo!';
document.body.appendChild(novoParagrafo);
```

### Removendo um Elemento

```javascript
const paragrafo = document.querySelector('.descricao');
paragrafo.remove();
```

---

## Eventos: Fazendo a P√°gina Interativa! üéâ

**Eventos** s√£o a√ß√µes que ocorrem na p√°gina, como clicar em um bot√£o, passar o mouse sobre um elemento, ou pressionar uma tecla. Com JavaScript, podemos "escutar" esses eventos e fazer algo em resposta a eles.

### Principais Tipos de Eventos

- **`click`** ‚Äì Quando um elemento √© clicado.
- **`mouseover`** ‚Äì Quando o mouse passa sobre um elemento.
- **`mouseout`** ‚Äì Quando o mouse sai de um elemento.
- **`keydown`** ‚Äì Quando uma tecla √© pressionada.
- **`submit`** ‚Äì Quando um formul√°rio √© enviado.

### Como Usar Eventos com `addEventListener`

Usamos `addEventListener` para "ouvir" eventos em um elemento. Aqui est√° um exemplo de cada tipo de evento:

1. **Clique (click)**

   ```javascript
   const botao = document.getElementById('botao-mudar');
   botao.addEventListener('click', () => {
     alert('Voc√™ clicou no bot√£o!');
   });
   ```

2. **Mouse passando sobre o elemento (mouseover)**

   ```javascript
   const titulo = document.getElementById('titulo');
   titulo.addEventListener('mouseover', () => {
     titulo.style.color = 'red';
   });
   ```

3. **Mouse saindo do elemento (mouseout)**

   ```javascript
   titulo.addEventListener('mouseout', () => {
     titulo.style.color = 'black';
   });
   ```

4. **Pressionar uma tecla (keydown)**

   ```javascript
   document.addEventListener('keydown', (event) => {
     console.log('Voc√™ apertou a tecla: ' + event.key);
   });
   ```

5. **Envio de um formul√°rio (submit)**

   ```html
   <form id="formulario">
     <input type="text" name="nome" placeholder="Digite seu nome">
     <button type="submit">Enviar</button>
   </form>
   ```

   ```javascript
   const formulario = document.getElementById('formulario');
   formulario.addEventListener('submit', (event) => {
     event.preventDefault(); // Impede o envio do formul√°rio para que possamos manipul√°-lo
     alert('Formul√°rio enviado!');
   });
   ```

---

## Exemplo Completo com Eventos üöÄ

Vamos fazer uma p√°gina onde podemos:
1. Mudar o texto do t√≠tulo ao clicar no bot√£o.
2. Adicionar um par√°grafo novo.
3. Remover o t√≠tulo.

```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manipula√ß√£o de DOM com Eventos</title>
</head>
<body>
  <h1 id="titulo">Bem-vindo ao DOM!</h1>
  <p class="descricao">Vamos aprender a manipular eventos no DOM.</p>
  <button id="botao-mudar">Mudar Texto</button>
  <button id="botao-adicionar">Adicionar Par√°grafo</button>
  <button id="botao-remover">Remover T√≠tulo</button>

  <script>
    // Selecionando os elementos
    const titulo = document.getElementById('titulo');
    const botaoMudar = document.getElementById('botao-mudar');
    const botaoAdicionar = document.getElementById('botao-adicionar');
    const botaoRemover = document.getElementById('botao-remover');

    // Mudando o texto do t√≠tulo quando o bot√£o √© clicado
    botaoMudar.addEventListener('click', () => {
      titulo.textContent = 'T√≠tulo alterado com JavaScript!';
    });

    // Adicionando um novo par√°grafo ao clicar no bot√£o
    botaoAdicionar.addEventListener('click', () => {
      const novoParagrafo = document.createElement('p');
      novoParagrafo.textContent = 'Este √© um novo par√°grafo criado agora!';
      document.body.appendChild(novoParagrafo);
    });

    // Removendo o t√≠tulo ao clicar no bot√£o
    botaoRemover.addEventListener('click', () => {
      titulo.remove();
    });
  </script>
</body>
</html>
```

Neste exemplo:
1. Mudamos o texto do t√≠tulo ao clicar no bot√£o "Mudar Texto".
2. Adicionamos um novo par√°grafo ao clicar em "Adicionar Par√°grafo".
3. Removemos o t√≠tulo ao clicar em "Remover T√≠tulo".

---

## Experimente! ü•≥

Agora que voc√™ conhece o b√°sico, experimente esses exemplos e crie seus pr√≥prios eventos para manipular o DOM! Quanto mais praticar, mais f√°cil ser√° entender e criar p√°ginas interativas.
